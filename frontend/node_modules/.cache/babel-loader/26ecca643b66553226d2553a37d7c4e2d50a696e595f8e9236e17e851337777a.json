{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soumy\\\\OneDrive\\\\Desktop\\\\ExpenseFlow_01\\\\frontend\\\\src\\\\Components\\\\Chart\\\\Chart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJs, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\n\n// Register necessary Chart.js components for rendering\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext(); // Get income & expense data from global context\n\n  // Preparing data for the chart\n  const data = {\n    labels: incomes.map(inc => dateFormat(inc.date)),\n    // Format and use income dates as labels\n    datasets: [{\n      label: 'Income',\n      data: incomes.map(income => income.amount),\n      // Extract income amounts\n      backgroundColor: 'green',\n      // Set income line color\n      tension: .2 // Smoother line curve\n    }, {\n      label: 'Expenses',\n      data: expenses.map(expense => expense.amount),\n      // Extract expense amounts\n      backgroundColor: 'red',\n      // Set expense line color\n      tension: .2\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(ChartStyled, {\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      data: data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n// Styled container for the chart\n_s(Chart, \"PHep46UhTemPLuSa3MfIkZAuTiE=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n_c2 = ChartStyled;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"ChartStyled\");","map":{"version":3,"names":["React","Chart","ChartJs","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","styled","useGlobalContext","dateFormat","register","incomes","expenses","data","labels","map","inc","date","datasets","label","income","amount","backgroundColor","tension","expense","ChartStyled","div"],"sources":["C:/Users/soumy/OneDrive/Desktop/ExpenseFlow_01/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React from 'react'\r\nimport { Chart as ChartJs, \r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n} from 'chart.js'\r\n\r\nimport { Line } from 'react-chartjs-2'\r\nimport styled from 'styled-components'\r\nimport { useGlobalContext } from '../../context/globalContext'\r\nimport { dateFormat } from '../../utils/dateFormat'\r\n\r\n// Register necessary Chart.js components for rendering\r\nChartJs.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement,\r\n)\r\n\r\nfunction Chart() {\r\n    const { incomes, expenses } = useGlobalContext() // Get income & expense data from global context\r\n\r\n    // Preparing data for the chart\r\n    const data = {\r\n        labels: incomes.map((inc) => dateFormat(inc.date)), // Format and use income dates as labels\r\n        datasets: [\r\n            {\r\n                label: 'Income',\r\n                data: incomes.map((income) => income.amount), // Extract income amounts\r\n                backgroundColor: 'green', // Set income line color\r\n                tension: .2 // Smoother line curve\r\n            },\r\n            {\r\n                label: 'Expenses',\r\n                data: expenses.map((expense) => expense.amount), // Extract expense amounts\r\n                backgroundColor: 'red', // Set expense line color\r\n                tension: .2\r\n            }\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <ChartStyled>\r\n            <Line data={data} /> {/* Render Line Chart */}\r\n        </ChartStyled>\r\n    )\r\n}\r\n\r\n// Styled container for the chart\r\nconst ChartStyled = styled.div`\r\n    background: #FCF6F9;\r\n    border: 2px solid #FFFFFF;\r\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\r\n    padding: 1rem;\r\n    border-radius: 20px;\r\n    height: 100%;\r\n`;\r\n\r\nexport default Chart\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,IAAIC,OAAO,EACrBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,QACP,UAAU;AAEjB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,UAAU,QAAQ,wBAAwB;;AAEnD;AAAA;AACAZ,OAAO,CAACa,QAAQ,CACZZ,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,CACb;AAED,SAAST,KAAK,GAAG;EAAA;EACb,MAAM;IAAEe,OAAO;IAAEC;EAAS,CAAC,GAAGJ,gBAAgB,EAAE,EAAC;;EAEjD;EACA,MAAMK,IAAI,GAAG;IACTC,MAAM,EAAEH,OAAO,CAACI,GAAG,CAAEC,GAAG,IAAKP,UAAU,CAACO,GAAG,CAACC,IAAI,CAAC,CAAC;IAAE;IACpDC,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,QAAQ;MACfN,IAAI,EAAEF,OAAO,CAACI,GAAG,CAAEK,MAAM,IAAKA,MAAM,CAACC,MAAM,CAAC;MAAE;MAC9CC,eAAe,EAAE,OAAO;MAAE;MAC1BC,OAAO,EAAE,EAAE,CAAC;IAChB,CAAC,EACD;MACIJ,KAAK,EAAE,UAAU;MACjBN,IAAI,EAAED,QAAQ,CAACG,GAAG,CAAES,OAAO,IAAKA,OAAO,CAACH,MAAM,CAAC;MAAE;MACjDC,eAAe,EAAE,KAAK;MAAE;MACxBC,OAAO,EAAE;IACb,CAAC;EAET,CAAC;EAED,oBACI,QAAC,WAAW;IAAA,wBACR,QAAC,IAAI;MAAC,IAAI,EAAEV;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG,KAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACX;AAEtB;;AAEA;AAAA,GA7BSjB,KAAK;EAAA,QACoBY,gBAAgB;AAAA;AAAA,KADzCZ,KAAK;AA8Bd,MAAM6B,WAAW,GAAGlB,MAAM,CAACmB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC,MAPID,WAAW;AASjB,eAAe7B,KAAK;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}